#!C:\Users\Darling02\AppData\Local\Programs\Python\Python310\python.exe
import sys
sys.path.append('D:/桌面/文件夹/Project/Python/practice/venv/Lib/site-packages')
import tkinter as tk
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
import financial_instruments as fi

img = {"shou_ye.png": "",
       "wei_shou_lu.png": "",
       "error.png": "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"}

# 主窗口
root = ttk.Window()
root.title("Financial calculator 2.0")
root.geometry("900x540")
root.place_window_center()

# 图片
image_sy = tk.PhotoImage(data=img["shou_ye.png"])
image_wsl = tk.PhotoImage(data=img["wei_shou_lu.png"])
image_error = tk.PhotoImage(data=img["error.png"])

# 选择标签
ftab = ttk.Frame(root)
ftab.pack(pady=5, fill=X, side=TOP)
nb = ttk.Notebook(ftab)
nb.pack(side=LEFT, padx=(10, 10), expand=YES, fill=BOTH)

# 各个标签对应框架
k_frame = ttk.Frame(nb)
capm_frame = ttk.Frame(nb)
bond_frame = ttk.Frame(nb)
duration_frame = ttk.Frame(nb)
return_frame = ttk.Frame(nb)
equity_frame = ttk.Frame(nb)
PE_frame = ttk.Frame(nb)
future_frame = ttk.Frame(nb)
RAROC_frame = ttk.Frame(nb)

nb.add(child=k_frame, text="货币乘数", sticky=NW)
nb.add(child=capm_frame, text="CAPM模型", sticky=NW)
nb.add(child=bond_frame, text="债券估值", sticky=NW)
nb.add(child=duration_frame, text="久期计算", sticky=NW)
nb.add(child=return_frame, text="债券总收益率", sticky=NW)
nb.add(child=equity_frame, text="股权估值", sticky=NW)
nb.add(child=PE_frame, text="市盈率计算", sticky=NW)
nb.add(child=future_frame, text="远期合约估值", sticky=NW)
nb.add(child=RAROC_frame, text="RAROC计算", sticky=NW)

# 计算结果outcome
k_var = tk.StringVar()
capm_var = tk.StringVar()
bond_var = tk.StringVar()
duration_var = tk.StringVar()
return_var = tk.StringVar()
equity_var = tk.StringVar()
PE_var = tk.StringVar()
future_var = tk.StringVar()
RAROC_var = tk.StringVar()

# 类型选择
b_selection = tk.StringVar()
e_selection = tk.StringVar()


# 定义计算函数
def calculate_k():  # 计算货币乘数
    try:
        r = entry_r.get()
        e = entry_e.get()
        c = entry_c.get()
        Ms = entry_Ms.get()
        B = entry_B.get()
        if r != "" and e != "" and c != "":
            k = 1 / (float(r) + float(e) + float(c))
            k_var.set("货币乘数为：" + str(k))
            k_answer_label.configure(image=image_sy)
        elif Ms != "" and B != "":
            k = float(Ms) / float(B)
            k_var.set("货币乘数为：" + str(k))
            k_answer_label.configure(image=image_sy)
        else:
            k_var.set("已知变量不足，无法求解货币乘数")
            k_answer_label.configure(image=image_wsl)
    except ValueError:
        k_var.set("输入的数字不合理！请重新输入后再次运行。")
        k_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        k_var.set("分母不能为零！请重新输入后再次运行。")
        k_answer_label.configure(image=image_error)


def calculate_capm():  # CAPM模型
    try:
        rf = entry_rf.get()
        rm = entry_rm.get()
        β = entry_β.get()
        σp = entry_σp.get()
        σm = entry_σm.get()
        E = entry_E.get()
        if rf != "" and rm != "" and β != "":
            E = fi.capm_model(rf, rm, β, σp, σm, E)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("组合的期望收益率E为：" + str(E)+"\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif rf != "" and rm != "" and σp != "" and σm != "":
            E = fi.capm_model(rf, rm, β, σp, σm, E)
            SR = fi.sharp_ratio(E, rf, σp)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("组合的期望收益率E为：" + str(E) + "\n夏普比率SR为：" + str(SR) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E != "" and rm != "" and σp != "" and σm != "":
            rf = fi.capm_model(rf, rm, β, σp, σm, E)
            SR = fi.sharp_ratio(E, rf, σp)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("无风险利率rf为：" + str(rf) + "\n夏普比率SR为：" + str(SR) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E != "" and rm != "" and β != "":
            rf = fi.capm_model(rf, rm, β, σp, σm, E)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("无风险利率rf为：" + str(rf) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E != "" and rf != "" and β != "":
            rm = fi.capm_model(rf, rm, β, σp, σm, E)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("市场组合收益率rm为：" + str(rm) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E != "" and rf != "" and σp != "" and σm != "":
            rm = fi.capm_model(rf, rm, β, σp, σm, E)
            SR = fi.sharp_ratio(E, rf, σp)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("市场组合收益率rm为：" + str(rm) + "\n夏普比率SR为：" + str(SR) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E != "" and rf != "" and rm != "" and σp == "" and σm == "":
            β = fi.capm_model(rf, rm, β, σp, σm, E)
            TR = fi.treynor_ratio(E, rf, β)
            capm_var.set("系统性风险β为：" + str(β) + "\n特雷诺比率TR为：" + str(TR))
            capm_answer_label.configure(image=image_sy)
        elif E == "" and rf == "" and rm == "" and σp != "" and σm != "":
            β = fi.capm_model(rf, rm, β, σp, σm, E)
            capm_var.set("系统性风险β为：" + str(β))
            capm_answer_label.configure(image=image_sy)
        else:
            capm_var.set("已知变量不足，无法求解模型中未知变量")
            capm_answer_label.configure(image=image_wsl)
    except ValueError:
        capm_var.set("输入的数字不合理！请重新输入后再次运行。")
        capm_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        capm_var.set("分母不能为零！请重新输入后再次运行。")
        capm_answer_label.configure(image=image_error)


def calculate_bond():  # 债券估值
    if b_selection.get() == "零息债券":
        try:
            PV = entry_PV.get()
            FV = entry_FV.get()
            N = entry_N.get()
            IY = entry_IY.get()
            bond = fi.ZeroCouponBond(IY, 0, N, FV, PV)
            if FV != "" and N != "" and IY != "":
                PV = bond.valuation(PV, FV, N, IY)
                bond_var.set("债券的现值PV为：" + str(PV))
                bond_answer_label.configure(image=image_sy)
            elif FV != "" and PV != "" and IY != "":
                N = bond.valuation(PV, FV, N, IY)
                bond_var.set("债券的付息次数N为：" + str(N))
                bond_answer_label.configure(image=image_sy)
            elif FV != "" and PV != "" and N != "":
                IY = bond.valuation(PV, FV, N, IY)
                bond_var.set("债券的收益率IY为：" + str(IY))
                bond_answer_label.configure(image=image_sy)
            elif PV != "" and IY != "" and N != "":
                FV = bond.valuation(PV, FV, N, IY)
                bond_var.set("债券的终值FV为：" + str(FV))
                bond_answer_label.configure(image=image_sy)
            else:
                bond_var.set("已知变量不足，无法对债券进行估值")
                bond_answer_label.configure(image=image_wsl)
        except ValueError:
            bond_var.set("输入的数字不合理！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            bond_var.set("分母不能为零！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)

    elif b_selection.get() == "定息债券":
        try:
            PV = entry_PV.get()
            FV = entry_FV.get()
            N = entry_N.get()
            IY = entry_IY.get()
            PMT = entry_PMT.get()
            bond = fi.LevelCouponBond(IY, 0, N, FV, PV, PMT)
            if PV != "" and FV != "" and N != "" and PMT != "":
                bond_var.set("很抱歉，该计算器暂不支持此债券收益率求解")
                bond_answer_label.configure(image=image_wsl)
            elif PV != "" and FV != "" and N != "" and IY != "":
                PMT = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券的现金流PMT为：" + str(PMT))
                bond_answer_label.configure(image=image_sy)
            elif PV != "" and FV != "" and PMT != "" and IY != "":
                N = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券的付息次数N为：" + str(N))
                bond_answer_label.configure(image=image_sy)
            elif PV != "" and N != "" and PMT != "" and IY != "":
                FV = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券的终值FV为：" + str(FV))
                bond_answer_label.configure(image=image_sy)
            elif FV != "" and N != "" and PMT != "" and IY != "":
                PV = fi.discount(N, PMT, IY, FV)
                bond_var.set("债券的现值PV为：" + str(PV))
                bond_answer_label.configure(image=image_sy)
            else:
                bond_var.set("已知变量不足，无法对债券进行估值")
                bond_answer_label.configure(image=image_wsl)
        except ValueError:
            bond_var.set("输入的数字不合理！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            bond_var.set("分母不能为零！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)

    elif b_selection.get() == "可赎回债券":
        try:
            PV = entry_PV.get()
            FV = entry_FV.get()
            N = entry_N.get()
            IY = entry_IY.get()
            PMT = entry_PMT.get()
            bond = fi.LevelCouponBond(IY, 0, N, FV, PV, PMT)
            if PV != "" and FV != "" and N != "" and PMT != "":
                bond_var.set("很抱歉，该计算器暂不支持赎回收益率求解")
                bond_answer_label.configure(image=image_wsl)
            elif PV != "" and FV != "" and N != "" and IY != "":
                PMT = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券的现金流PMT为：" + str(PMT))
                bond_answer_label.configure(image=image_sy)
            elif PV != "" and FV != "" and PMT != "" and IY != "":
                N = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券赎回日之前的付息次数N为：" + str(N))
                bond_answer_label.configure(image=image_sy)
            elif PV != "" and N != "" and PMT != "" and IY != "":
                FV = bond.valuation(PV, FV, PMT, N, IY)
                bond_var.set("债券的赎回价格Pm为：" + str(FV))
                bond_answer_label.configure(image=image_sy)
            elif FV != "" and N != "" and PMT != "" and IY != "":
                PV = fi.discount(N, PMT, IY, FV)
                bond_var.set("债券的现值PV为：" + str(PV))
                bond_answer_label.configure(image=image_sy)
            else:
                bond_var.set("已知变量不足，无法对债券进行估值")
                bond_answer_label.configure(image=image_wsl)
        except ValueError:
            bond_var.set("输入的数字不合理！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            bond_var.set("分母不能为零！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)

    elif b_selection.get() == "永续债券":
        try:
            PV = entry_PV.get()
            IY = entry_IY.get()
            PMT = entry_PMT.get()
            bond = fi.PerpetualBond(IY, 0, PMT, PV)
            if PMT != "" and IY != "":
                PV = bond.valuation(PV, PMT, IY)
                bond_var.set("债券的现值PV为：" + str(PV))
                bond_answer_label.configure(image=image_sy)
            elif PMT != "" and PV != "":
                IY = bond.valuation(PV, PMT, IY)
                bond_var.set("债券的收益率IY为：" + str(IY))
                bond_answer_label.configure(image=image_sy)
            elif PV != " " and IY != " ":
                PMT = bond.valuation(PV, PMT, IY)
                bond_var.set("债券的现金流PMT为：" + str(PMT))
                bond_answer_label.configure(image=image_sy)
            else:
                bond_var.set("已知变量不足，无法对债券进行估值")
                bond_answer_label.configure(image=image_wsl)
        except ValueError:
            bond_var.set("输入的数字不合理！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            bond_var.set("分母不能为零！请重新输入后再次运行。")
            bond_answer_label.configure(image=image_error)


def calculate_duration():  # 计算久期和凸性
    try:
        Ct = entry_Ct.get()
        YTM = entry_YTM.get()
        N = entry_d_N.get()
        FV = entry_d_FV.get()
        M = 0
        Coupon = 0
        if Ct != "" and YTM != "" and N != "" and FV != "":
            d_PV = fi.discount(N, Ct, YTM, FV)
            for t in range(1, int(N) + 1):
                m = float(Ct) * t / (1 + float(YTM)) ** t
                M = M + m
            numerator = M + float(FV) * int(N) / (1 + float(YTM)) ** int(N)
            MacD = numerator / d_PV
            ModD = MacD / (1 + float(YTM))
            for t in range(1, int(N) + 1):  # 凸性计算有问题！
                one_Coupon = float(Ct) * (t ** 2 + t) / (1 + float(YTM)) ** t
                Coupon = Coupon + one_Coupon
            Second = Coupon + (float(FV) * (int(N) ** 2 + int(N))) / (1 + float(YTM)) ** int(N)
            C = Second / d_PV * (1 + float(YTM)) ** 2
            duration_var.set("麦考利久期MacD为："+str(MacD)+"\n修正久期ModD为：" + str(ModD)+"\n凸性C为：" + str(C))
            duration_answer_label.configure(image=image_sy)
        else:
            duration_var.set("已知变量不足，无法求解久期和凸性")
            duration_answer_label.configure(image=image_wsl)
    except ValueError:
        duration_var.set("输入的数字不合理！请重新输入后再次运行。")
        duration_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        duration_var.set("分母不能为零！请重新输入后再次运行。")
        duration_answer_label.configure(image=image_error)


def calculate_return():  # 计算债券年收益率
    try:
        C = entry_C.get()
        r_back = entry_r_r.get()
        N_year = entry_r_N.get()
        m = entry_r_m.get()
        FV = entry_r_FV.get()
        P = entry_P.get()
        r = float(r_back) / float(m)
        N = float(N_year) * float(m)
        if P != "" and FV != "" and N != "" and C != "" and m != "" and r != "":
            rate = (((float(C) * ((1 + float(r)) ** float(N) - 1) / float(r) + float(FV)) / float(P)) ** (
                        1 / float(N)) - 1) * float(m)
            return_var.set("债券年总收益率：" + str(rate))
            return_answer_label.configure(image=image_sy)
        else:
            return_var.set("已知变量不足，无法计算该债券年收益率")
            return_answer_label.configure(image=image_wsl)
    except ValueError:
        return_var.set("输入的数字不合理！请重新输入后再次运行。")
        return_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        return_var.set("分母不能为零！请重新输入后再次运行。")
        return_answer_label.configure(image=image_error)


def calculate_equity():  # 股权估值
    if e_selection.get() == "零增长模型":
        try:
            k = entry_e_k.get()
            D = entry_ed.get()
            if D != "" and k != "":
                V0 = fi.dividends_discount(D, k, 0)
                equity_var.set("该股票当前内在价值为" + str(V0))
                equity_answer_label.configure(image=image_sy)
            else:
                equity_var.set("已知变量不足，无法计算股权现值")
                equity_answer_label.configure(image=image_wsl)
        except ValueError:
            equity_var.set("输入的数字不合理！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            equity_var.set("分母不能为零！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)

    elif e_selection.get() == "常增长模型":
        try:
            k = entry_e_k.get()
            D = entry_ed.get()
            g = entry_e_g.get()
            if D != "" and k != "" and g != "":
                V0 = fi.dividends_discount(D, k, g)
                equity_var.set("该股票当前内在价值为" + str(V0))
                equity_answer_label.configure(image=image_sy)
            else:
                equity_var.set("已知变量不足，无法计算股权现值")
                equity_answer_label.configure(image=image_wsl)
        except ValueError:
            equity_var.set("输入的数字不合理！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            equity_var.set("分母不能为零！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)

    elif e_selection.get() == "单期股权估值":
        try:
            ED = entry_ed.get()
            EP = entry_ep.get()
            k = entry_e_k.get()
            if ED != "" and EP != "" and k != "":
                V0 = fi.equity_valuation(ED, EP, k)
                equity_var.set("该股票当前内在价值为" + str(V0))
                equity_answer_label.configure(image=image_sy)
            else:
                equity_var.set("已知变量不足，无法计算股权现值")
                equity_answer_label.configure(image=image_wsl)
        except ValueError:
            equity_var.set("输入的数字不合理！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            equity_var.set("分母不能为零！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)

    elif e_selection.get() == "市盈率模型":
        try:
            k = entry_e_k.get()
            E = entry_ed.get()
            b = entry_e_b.get()
            ROE = entry_e_roe.get()
            if E != "" and k != "" and b != "" and ROE != "":
                V0 = fi.pe_valuation(E, b, k, ROE)
                equity_var.set("该股票当前内在价值为" + str(V0))
                equity_answer_label.configure(image=image_sy)
            else:
                equity_var.set("已知变量不足，无法计算股权现值")
                equity_answer_label.configure(image=image_wsl)
        except ValueError:
            equity_var.set("输入的数字不合理！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)
        except ZeroDivisionError:
            equity_var.set("分母不能为零！请重新输入后再次运行。")
            equity_answer_label.configure(image=image_error)


def calculate_pe():  # 计算市盈率
    try:
        k = entry_pe_k.get()
        E = entry_pe_E.get()
        b = entry_pe_b.get()
        ROE = entry_pe_roe.get()
        if E != "" and k != "" and b != "" and ROE != "":
            PE = fi.price_earning_rate(E, b, k, ROE)
            if float(ROE) > float(k):
                PE_var.set("该股票市盈率PE为" + str(PE) + "，且PVGO>0，未来成长机会良好")
                PE_answer_label.configure(image=image_sy)
            else:
                PE_var.set("该股票市盈率PE为" + str(PE) + "，且PVGO<=0，不具备很大的未来成长性")
                PE_answer_label.configure(image=image_sy)
        else:
            PE_var.set("已知变量不足，无法计算市盈率")
            PE_answer_label.configure(image=image_wsl)
    except ValueError:
        PE_var.set("输入的数字不合理！请重新输入后再次运行。")
        PE_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        PE_var.set("分母不能为零！请重新输入后再次运行。")
        PE_answer_label.configure(image=image_error)


def calculate_future():  # 远期合约估值
    try:
        rf = entry_f_rf.get()
        St = entry_St.get()
        T = entry_T.get()
        if rf != "" and St != "" and T != "":
            future = fi.Future(rf, St, T)
            f = future.parity()
            future_var.set("该远期合约平价价值为：" + str(f))
            future_answer_label.configure(image=image_sy)
        else:
            future_var.set("已知变量不足，无法对该远期合约进行估值")
            future_answer_label.configure(image=image_wsl)
    except ValueError:
        future_var.set("输入的数字不合理！请重新输入后再次运行。")
        future_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        future_var.set("分母不能为零！请重新输入后再次运行。")
        future_answer_label.configure(image=image_error)


def calculate_raroc():  # 远期合约估值
    try:
        r = entry_ra_r.get()
        c1 = entry_c1.get()
        c2 = entry_c2.get()
        PD = entry_PD.get()
        LGD = entry_LGD.get()
        EAD = entry_EAD.get()
        UL = entry_UL.get()
        if r != "" and c1 != "" and c2 != "" and PD != "" and LGD != "" and EAD != "":
            RAROC = (float(EAD) * (float(r) - float(c1) - float(c2)) - float(EAD) * float(PD) * float(LGD)) / float(UL)
            RAROC_var.set("该贷款风险调整后收益RAROC为：" + str(RAROC))
            RAROC_answer_label.configure(image=image_sy)
        else:
            RAROC_var.set("已知变量不足，无法计算RAROC")
            RAROC_answer_label.configure(image=image_wsl)
    except ValueError:
        RAROC_var.set("输入的数字不合理！请重新输入后再次运行。")
        RAROC_answer_label.configure(image=image_error)
    except ZeroDivisionError:
        RAROC_var.set("分母不能为零！请重新输入后再次运行。")
        RAROC_answer_label.configure(image=image_error)


# 货币乘数
k_user_frame = ttk.Frame(k_frame)
k_user_frame.pack(side="left", padx=16, pady=18)
k_calculate_frame = ttk.Frame(k_user_frame)
k_calculate_frame.pack(side="bottom")
k_label_frame = ttk.Frame(k_user_frame)
k_label_frame.pack(side="left")
k_input_frame = ttk.Frame(k_user_frame)
k_input_frame.pack(side="left")
k_output_frame = ttk.Frame(k_frame)
k_output_frame.pack(side="right")

tk.Label(k_label_frame, text="法定存款准备金率r:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(k_label_frame, text="超额准备金率e:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(k_label_frame, text="现金漏损率c:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(k_label_frame, text="货币供给量Ms:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(k_label_frame, text="基础货币B:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_r = ttk.Entry(k_input_frame, font=("微软雅黑", 8), width=12)
entry_r.pack(padx=3, pady=6)
entry_e = ttk.Entry(k_input_frame, font=("微软雅黑", 8), width=12)
entry_e.pack(padx=3, pady=6)
entry_c = ttk.Entry(k_input_frame, font=("微软雅黑", 8), width=12)
entry_c.pack(padx=3, pady=6)
entry_Ms = ttk.Entry(k_input_frame, font=("微软雅黑", 8), width=12)
entry_Ms.pack(padx=3, pady=6)
entry_B = ttk.Entry(k_input_frame, font=("微软雅黑", 8), width=12)
entry_B.pack(padx=3, pady=6)

ttk.Button(k_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_k).pack(pady=(30, 20))  # command=calculate_k

k_answer_frame = ttk.LabelFrame(k_output_frame, text="Answer")
k_answer_frame.pack(side="top", padx=60, pady=20)
k_answer_label = tk.Label(k_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=k_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
k_answer_label.pack(pady=(1, 2), padx=2)


# CAPM模型
capm_user_frame = ttk.Frame(capm_frame)
capm_user_frame.pack(side="left", padx=16, pady=18)
capm_calculate_frame = ttk.Frame(capm_user_frame)
capm_calculate_frame.pack(side="bottom")
capm_label_frame = ttk.Frame(capm_user_frame)
capm_label_frame.pack(side="left")
capm_input_frame = ttk.Frame(capm_user_frame)
capm_input_frame.pack(side="left")
capm_output_frame = ttk.Frame(capm_frame)
capm_output_frame.pack(side="right")

tk.Label(capm_label_frame, text="无风险收益率rf:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=(20, 8))
tk.Label(capm_label_frame, text="市场组合收益率rm:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(capm_label_frame, text="系统性风险β:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(capm_label_frame, text="资产组合风险σp:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(capm_label_frame, text="市场组合风险σm:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(capm_label_frame, text="组合预期收益率E:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_rf = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_rf.pack(padx=3, pady=(20, 8))
entry_rm = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_rm.pack(padx=3, pady=6)
entry_β = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_β.pack(padx=3, pady=6)
entry_σp = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_σp.pack(padx=3, pady=6)
entry_σm = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_σm.pack(padx=3, pady=6)
entry_E = ttk.Entry(capm_input_frame, font=("微软雅黑", 8), width=12)
entry_E.pack(padx=3, pady=6)

ttk.Button(capm_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_capm).pack(pady=(12, 20))  # command=calculate_capm

capm_answer_frame = ttk.LabelFrame(capm_output_frame, text="Answer")
capm_answer_frame.pack(side="top", padx=60, pady=20)
capm_answer_label = tk.Label(capm_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=capm_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
capm_answer_label.pack(pady=(1, 2), padx=2)


# 债券估值
bond_select_frame = ttk.Frame(bond_frame)
bond_select_frame.pack(side="top", pady=(16, 0))
bond_user_frame = ttk.Frame(bond_frame)
bond_user_frame.pack(side="left", padx=16)
bond_calculate_frame = ttk.Frame(bond_user_frame)
bond_calculate_frame.pack(side="bottom")
bond_label_frame = ttk.Frame(bond_user_frame)
bond_label_frame.pack(side="left")
bond_input_frame = ttk.Frame(bond_user_frame)
bond_input_frame.pack(side="left")
bond_output_frame = ttk.Frame(bond_frame)
bond_output_frame.pack(side="left")


# 债券类型选择
def bond_selection():
    if b_selection.get() == "零息债券":
        entry_FV.pack_forget()
        entry_PMT.pack_forget()
        entry_IY.pack_forget()
        entry_N.pack_forget()
        l_fv.pack_forget()
        l_pmt.pack_forget()
        l_iy.pack_forget()
        l_n.pack_forget()

        entry_FV.pack(padx=3, pady=6)
        entry_IY.pack(padx=3, pady=6)
        entry_N.pack(padx=3, pady=6)
        l_fv.pack(padx=15, pady=8)
        l_iy.configure(text="   收益率IY:")
        l_iy.pack(padx=15, pady=8)
        l_n.pack(padx=15, pady=8)

    elif b_selection.get() == "定息债券":
        entry_FV.pack(padx=3, pady=6)
        entry_IY.pack(padx=3, pady=6)
        entry_PMT.pack(padx=3, pady=6)
        entry_N.pack(padx=3, pady=6)
        l_fv.pack(padx=15, pady=8)
        l_iy.configure(text="   收益率IY:")
        l_iy.pack(padx=15, pady=8)
        l_pmt.pack(padx=15, pady=8)
        l_n.pack(padx=15, pady=8)

    elif b_selection.get() == "永续债券":
        entry_FV.pack_forget()
        entry_PMT.pack_forget()
        entry_IY.pack_forget()
        entry_N.pack_forget()
        l_fv.pack_forget()
        l_pmt.pack_forget()
        l_iy.pack_forget()
        l_n.pack_forget()

        l_iy.configure(text="   收益率IY:")
        l_iy.pack(padx=15, pady=8)
        l_pmt.pack(padx=15, pady=8)
        entry_IY.pack(padx=3, pady=6)
        entry_PMT.pack(padx=3, pady=6)

    elif b_selection.get() == "可赎回债券":
        entry_FV.pack_forget()
        entry_PMT.pack_forget()
        entry_IY.pack_forget()
        entry_N.pack_forget()
        l_fv.pack_forget()
        l_pmt.pack_forget()
        l_iy.pack_forget()
        l_n.pack_forget()

        entry_FV.pack(padx=3, pady=6)
        entry_IY.pack(padx=3, pady=6)
        entry_PMT.pack(padx=3, pady=6)
        entry_N.pack(padx=3, pady=6)
        l_fv.pack(padx=15, pady=8)
        l_iy.configure(text="赎回收益率YTC:")
        l_iy.pack(padx=15, pady=8)
        l_pmt.pack(padx=15, pady=8)
        l_n.pack(padx=15, pady=8)


ttk.Radiobutton(bond_select_frame, text="定息债券", variable=b_selection, value="定息债券", command=bond_selection).pack(side="left", padx=9)
ttk.Radiobutton(bond_select_frame, text="零息债券", variable=b_selection, value="零息债券", command=bond_selection).pack(side="left", padx=9)
ttk.Radiobutton(bond_select_frame, text="永续债券", variable=b_selection, value="永续债券", command=bond_selection).pack(side="left", padx=9)
ttk.Radiobutton(bond_select_frame, text="可赎回债券", variable=b_selection, value="可赎回债券", command=bond_selection).pack(side="left", padx=9)
b_selection.set("定息债券")

l_pv = tk.Label(bond_label_frame, text="   债券现值PV:", font=("微软雅黑", 10), height=1)
l_pv.pack(padx=15, pady=(6, 8))
l_fv = tk.Label(bond_label_frame, text="   债券终值FV:", font=("微软雅黑", 10), height=1)
l_fv.pack(padx=15, pady=8)
l_iy = tk.Label(bond_label_frame, text="   收益率IY:", font=("微软雅黑", 10), height=1)
l_iy.pack(padx=15, pady=8)
l_pmt = tk.Label(bond_label_frame, text="   现金流PMT:", font=("微软雅黑", 10), height=1)
l_pmt.pack(padx=15, pady=8)
l_n = tk.Label(bond_label_frame, text="   付息次数N:", font=("微软雅黑", 10), height=1)
l_n.pack(padx=15, pady=8)

entry_PV = ttk.Entry(bond_input_frame, font=("微软雅黑", 8), width=12)
entry_PV.pack(padx=3, pady=(6, 6))
entry_FV = ttk.Entry(bond_input_frame, font=("微软雅黑", 8), width=12)
entry_FV.pack(padx=3, pady=6)
entry_IY = ttk.Entry(bond_input_frame, font=("微软雅黑", 8), width=12)
entry_IY.pack(padx=3, pady=6)
entry_PMT = ttk.Entry(bond_input_frame, font=("微软雅黑", 8), width=12)
entry_PMT.pack(padx=3, pady=6)
entry_N = ttk.Entry(bond_input_frame, font=("微软雅黑", 8), width=12)
entry_N.pack(padx=3, pady=6)

ttk.Button(bond_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_bond).pack(pady=(10, 20))  # command=calculate_bond

bond_answer_frame = ttk.LabelFrame(bond_output_frame, text="Answer")
bond_answer_frame.pack(side="top", padx=60, pady=20)
bond_answer_label = tk.Label(bond_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=bond_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
bond_answer_label.pack(pady=(1, 2), padx=2)


# 久期和凸性计算
duration_user_frame = ttk.Frame(duration_frame)
duration_user_frame.pack(side="left", padx=16, pady=18)
duration_calculate_frame = ttk.Frame(duration_user_frame)
duration_calculate_frame.pack(side="bottom")
duration_label_frame = ttk.Frame(duration_user_frame)
duration_label_frame.pack(side="left")
duration_input_frame = ttk.Frame(duration_user_frame)
duration_input_frame.pack(side="left")
duration_output_frame = ttk.Frame(duration_frame)
duration_output_frame.pack(side="right")

tk.Label(duration_label_frame, text="息票利息Ct:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(duration_label_frame, text="到期收益率YTM:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(duration_label_frame, text="付息次数N:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(duration_label_frame, text="债券面值或终值FV:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_Ct = ttk.Entry(duration_input_frame, font=("微软雅黑", 8), width=12)
entry_Ct.pack(padx=3, pady=6)
entry_YTM = ttk.Entry(duration_input_frame, font=("微软雅黑", 8), width=12)
entry_YTM.pack(padx=3, pady=6)
entry_d_N = ttk.Entry(duration_input_frame, font=("微软雅黑", 8), width=12)
entry_d_N.pack(padx=3, pady=6)
entry_d_FV = ttk.Entry(duration_input_frame, font=("微软雅黑", 8), width=12)
entry_d_FV.pack(padx=3, pady=6)

ttk.Button(duration_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_duration).pack(pady=(10, 20))  # command=calculate_duration

duration_answer_frame = ttk.LabelFrame(duration_output_frame, text="Answer")
duration_answer_frame.pack(side="top", padx=60, pady=20)
duration_answer_label = tk.Label(duration_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=duration_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
duration_answer_label.pack(pady=(1, 2), padx=2)


# 债券年收益率计算
return_user_frame = ttk.Frame(return_frame)
return_user_frame.pack(side="left", padx=16, pady=18)
return_calculate_frame = ttk.Frame(return_user_frame)
return_calculate_frame.pack(side="bottom")
return_label_frame = ttk.Frame(return_user_frame)
return_label_frame.pack(side="left")
return_input_frame = ttk.Frame(return_user_frame)
return_input_frame.pack(side="left")
return_output_frame = ttk.Frame(return_frame)
return_output_frame.pack(side="right")

tk.Label(return_label_frame, text="息票利息C:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=(20, 8))
tk.Label(return_label_frame, text="年再投资收益率r:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(return_label_frame, text="期限N:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(return_label_frame, text="每年付息次数m:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(return_label_frame, text="债券面值FV:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(return_label_frame, text="债券期初价格P:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_C = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_C.pack(padx=3, pady=(20, 8))
entry_r_r = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_r_r.pack(padx=3, pady=6)
entry_r_N = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_r_N.pack(padx=3, pady=6)
entry_r_m = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_r_m.pack(padx=3, pady=6)
entry_r_FV = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_r_FV.pack(padx=3, pady=6)
entry_P = ttk.Entry(return_input_frame, font=("微软雅黑", 8), width=12)
entry_P.pack(padx=3, pady=6)

ttk.Button(return_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_return).pack(pady=(25, 20))  # command=calculate_return

return_answer_frame = ttk.LabelFrame(return_output_frame, text="Answer")
return_answer_frame.pack(side="top", padx=60, pady=20)
return_answer_label = tk.Label(return_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=return_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
return_answer_label.pack(pady=(1, 2), padx=2)


# 股权估值
equity_select_frame = ttk.Frame(equity_frame)
equity_select_frame.pack(side="top", pady=(16, 0))
equity_user_frame = ttk.Frame(equity_frame)
equity_user_frame.pack(side="left", padx=16)
equity_calculate_frame = ttk.Frame(equity_user_frame)
equity_calculate_frame.pack(side="bottom")
equity_label_frame = ttk.Frame(equity_user_frame)
equity_label_frame.pack(side="left")
equity_input_frame = ttk.Frame(equity_user_frame)
equity_input_frame.pack(side="left")
equity_output_frame = ttk.Frame(equity_frame)
equity_output_frame.pack(side="left")


# 模型类型选择
def equity_selection():
    if e_selection.get() == "单期股权估值":
        entry_ep.pack_forget()
        entry_e_g.pack_forget()
        entry_e_b.pack_forget()
        entry_e_roe.pack_forget()
        l_ep.pack_forget()
        l_e_g.pack_forget()
        l_e_b.pack_forget()
        l_e_roe.pack_forget()

        entry_ep.pack(padx=3, pady=6)
        l_ep.pack(padx=15, pady=8)

    elif e_selection.get() == "零增长模型":
        entry_ep.pack_forget()
        entry_e_g.pack_forget()
        entry_e_b.pack_forget()
        entry_e_roe.pack_forget()
        l_ep.pack_forget()
        l_e_g.pack_forget()
        l_e_b.pack_forget()
        l_e_roe.pack_forget()

    elif e_selection.get() == "常增长模型":
        entry_ep.pack_forget()
        entry_e_g.pack_forget()
        entry_e_b.pack_forget()
        entry_e_roe.pack_forget()
        l_ep.pack_forget()
        l_e_g.pack_forget()
        l_e_b.pack_forget()
        l_e_roe.pack_forget()

        l_e_g.pack(padx=15, pady=8)
        entry_e_g.pack(padx=3, pady=6)

    elif e_selection.get() == "市盈率模型":
        entry_ep.pack_forget()
        entry_e_g.pack_forget()
        entry_e_b.pack_forget()
        entry_e_roe.pack_forget()
        l_ep.pack_forget()
        l_e_g.pack_forget()
        l_e_b.pack_forget()
        l_e_roe.pack_forget()

        l_e_b.pack(padx=15, pady=8)
        entry_e_b.pack(padx=3, pady=6)
        l_e_roe.pack(padx=15, pady=8)
        entry_e_roe.pack(padx=3, pady=6)


ttk.Radiobutton(equity_select_frame, text="单期股权估值", variable=e_selection, value="单期股权估值", command=equity_selection).pack(side="left", padx=9)
ttk.Radiobutton(equity_select_frame, text="零增长模型", variable=e_selection, value="零增长模型", command=equity_selection).pack(side="left", padx=9)
ttk.Radiobutton(equity_select_frame, text="常增长模型", variable=e_selection, value="常增长模型", command=equity_selection).pack(side="left", padx=9)
ttk.Radiobutton(equity_select_frame, text="市盈率模型", variable=e_selection, value="市盈率模型", command=equity_selection).pack(side="left", padx=9)
e_selection.set("单期股权估值")

l_ed = tk.Label(equity_label_frame, text="预期现金股利收益ED:", font=("微软雅黑", 10), height=1)
l_ed.pack(padx=15, pady=(6, 8))
l_ep = tk.Label(equity_label_frame, text="预期期末股价EP:", font=("微软雅黑", 10), height=1)
l_ep.pack(padx=15, pady=8)
l_e_k = tk.Label(equity_label_frame, text="市场资本化率k:", font=("微软雅黑", 10), height=1)
l_e_k.pack(padx=15, pady=8)
l_e_g = tk.Label(equity_label_frame, text="股利增长率g:", font=("微软雅黑", 10), height=1)
l_e_b = tk.Label(equity_label_frame, text="再投资比率b:", font=("微软雅黑", 10), height=1)
l_e_roe = tk.Label(equity_label_frame, text="股权收益率ROE:", font=("微软雅黑", 10), height=1)

entry_ed = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)
entry_ed.pack(padx=3, pady=(6, 6))
entry_ep = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)
entry_ep.pack(padx=3, pady=6)
entry_e_k = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)
entry_e_k.pack(padx=3, pady=6)
entry_e_g = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)
entry_e_b = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)
entry_e_roe = ttk.Entry(equity_input_frame, font=("微软雅黑", 8), width=12)

ttk.Button(equity_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_equity).pack(pady=(10, 20))  # command=calculate_equity

equity_answer_frame = ttk.LabelFrame(equity_output_frame, text="Answer")
equity_answer_frame.pack(side="top", padx=60, pady=20)
equity_answer_label = tk.Label(equity_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=equity_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
equity_answer_label.pack(pady=(1, 2), padx=2)


# 市盈率计算
PE_user_frame = ttk.Frame(PE_frame)
PE_user_frame.pack(side="left", padx=16, pady=18)
PE_calculate_frame = ttk.Frame(PE_user_frame)
PE_calculate_frame.pack(side="bottom")
PE_label_frame = ttk.Frame(PE_user_frame)
PE_label_frame.pack(side="left")
PE_input_frame = ttk.Frame(PE_user_frame)
PE_input_frame.pack(side="left")
PE_output_frame = ttk.Frame(PE_frame)
PE_output_frame.pack(side="right")

tk.Label(PE_label_frame, text="市场资本化率k:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(PE_label_frame, text="预期现金股利收益ED:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(PE_label_frame, text="再投资比率b:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(PE_label_frame, text="股权收益率ROE:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_pe_k = ttk.Entry(PE_input_frame, font=("微软雅黑", 8), width=12)
entry_pe_k.pack(padx=3, pady=6)
entry_pe_E = ttk.Entry(PE_input_frame, font=("微软雅黑", 8), width=12)
entry_pe_E.pack(padx=3, pady=6)
entry_pe_b = ttk.Entry(PE_input_frame, font=("微软雅黑", 8), width=12)
entry_pe_b.pack(padx=3, pady=6)
entry_pe_roe = ttk.Entry(PE_input_frame, font=("微软雅黑", 8), width=12)
entry_pe_roe.pack(padx=3, pady=6)

ttk.Button(PE_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_pe).pack(pady=(30, 20))  # command=calculate_pe

PE_answer_frame = ttk.LabelFrame(PE_output_frame, text="Answer")
PE_answer_frame.pack(side="top", padx=60, pady=20)
PE_answer_label = tk.Label(PE_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=PE_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
PE_answer_label.pack(pady=(1, 2), padx=2)


# 远期合约估值
future_user_frame = ttk.Frame(future_frame)
future_user_frame.pack(side="left", padx=16, pady=18)
future_calculate_frame = ttk.Frame(future_user_frame)
future_calculate_frame.pack(side="bottom")
future_label_frame = ttk.Frame(future_user_frame)
future_label_frame.pack(side="left")
future_input_frame = ttk.Frame(future_user_frame)
future_input_frame.pack(side="left")
future_output_frame = ttk.Frame(future_frame)
future_output_frame.pack(side="right")

tk.Label(future_label_frame, text="无风险利率rf:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(future_label_frame, text="股票当前价格S0:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(future_label_frame, text="期限T（年）:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_f_rf = ttk.Entry(future_input_frame, font=("微软雅黑", 8), width=12)
entry_f_rf.pack(padx=3, pady=6)
entry_St = ttk.Entry(future_input_frame, font=("微软雅黑", 8), width=12)
entry_St.pack(padx=3, pady=6)
entry_T = ttk.Entry(future_input_frame, font=("微软雅黑", 8), width=12)
entry_T.pack(padx=3, pady=6)

ttk.Button(future_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_future).pack(pady=(30, 20))  # command=calculate_future

future_answer_frame = ttk.LabelFrame(future_output_frame, text="Answer")
future_answer_frame.pack(side="top", padx=60, pady=20)
future_answer_label = tk.Label(future_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=future_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
future_answer_label.pack(pady=(1, 2), padx=2)


# RAROC计算
RAROC_user_frame = ttk.Frame(RAROC_frame)
RAROC_user_frame.pack(side="left", padx=16, pady=18)
RAROC_calculate_frame = ttk.Frame(RAROC_user_frame)
RAROC_calculate_frame.pack(side="bottom")
RAROC_label_frame = ttk.Frame(RAROC_user_frame)
RAROC_label_frame.pack(side="left")
RAROC_input_frame = ttk.Frame(RAROC_user_frame)
RAROC_input_frame.pack(side="left")
RAROC_output_frame = ttk.Frame(RAROC_frame)
RAROC_output_frame.pack(side="right")

tk.Label(RAROC_label_frame, text="贷款利率r:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="资金成本率c1:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="经营成本率c2:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="违约概率PD:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="违约损失率LGD:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="风险敞口EAD:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)
tk.Label(RAROC_label_frame, text="非预期损失UL:", font=("微软雅黑", 10), height=1).pack(padx=10, pady=8)

entry_ra_r = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_ra_r.pack(padx=3, pady=6)
entry_c1 = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_c1.pack(padx=3, pady=6)
entry_c2 = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_c2.pack(padx=3, pady=6)
entry_PD = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_PD.pack(padx=3, pady=6)
entry_LGD = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_LGD.pack(padx=3, pady=6)
entry_EAD = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_EAD.pack(padx=3, pady=6)
entry_UL = ttk.Entry(RAROC_input_frame, font=("微软雅黑", 8), width=12)
entry_UL.pack(padx=3, pady=6)

ttk.Button(RAROC_calculate_frame, text="计算", style="outline", cursor="hand2", command=calculate_raroc).pack(pady=(10, 20))  # command=calculate_RAROC

RAROC_answer_frame = ttk.LabelFrame(RAROC_output_frame, text="Answer")
RAROC_answer_frame.pack(side="top", padx=60, pady=20)
RAROC_answer_label = tk.Label(RAROC_answer_frame, font=("微软雅黑", 10), height=378, width=400, textvariable=RAROC_var, relief="ridge", wraplength=455, justify="left", anchor="n", image=image_sy, compound="top")
RAROC_answer_label.pack(pady=(1, 2), padx=2)


root.mainloop()
